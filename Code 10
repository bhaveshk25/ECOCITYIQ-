import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA

# Load cleaned dataset
df_cleaned = pd.read_csv('data/cleaned_air_quality.csv')
df_cleaned['Date'] = pd.to_datetime(df_cleaned['Date'])

# Group by Date to ensure unique index (take mean if duplicate exists)
df_cleaned = df_cleaned.groupby('Date').mean(numeric_only=True).sort_index()

# Assign daily frequency (reindexing will work now)
df_cleaned = df_cleaned.asfreq('D', method='pad')
df_cleaned.index.freq = pd.infer_freq(df_cleaned.index) or 'D'

# Prepare a DataFrame to store future predictions
future_predictions = pd.DataFrame()

# Iterate over all columns (except 'Date') to fit ARIMA model and forecast
for column in df_cleaned.columns:
    data = df_cleaned[column].dropna()

    # Fit ARIMA model if data has more than one point
    if len(data) > 1:
        model = ARIMA(data, order=(5, 1, 0))
        model_fit = model.fit()

        # Forecast next 12 days (or adjust this number as needed)
        forecast_steps = 20  # You can change this number for longer forecasts
        forecast = model_fit.forecast(steps=forecast_steps)

        # Generate a date range for the forecasted data
        forecast_dates = pd.date_range(data.index[-1] + pd.Timedelta(days=1), periods=forecast_steps, freq='D')

        # Store the forecast in the future_predictions DataFrame
        future_predictions[column] = forecast

        # Plot historical data and forecast
        plt.figure(figsize=(10, 5))
        data.plot(label=f'Historical {column}')
        forecast_series = pd.Series(forecast, index=forecast_dates)
        forecast_series.plot(label=f'Forecast {column}', color='red')
        plt.title(f"{column} Forecast")
        plt.xlabel("Date")
        plt.ylabel(f"{column} Level")
        plt.legend()
        plt.tight_layout()
        plt.show()

# Optionally, save the future predictions to a CSV file
future_predictions.to_csv('future_predictions.csv', index=False)

